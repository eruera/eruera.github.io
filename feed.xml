<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seven</title>
    <description>来看看</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 10 Jun 2017 00:36:34 +0800</pubDate>
    <lastBuildDate>Sat, 10 Jun 2017 00:36:34 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>如何制作完整的最小的可检验的代码片段(转译)</title>
        <description>&lt;p&gt;当你问由于你的代码造成的一个问题时，如果你提供的代码别人可以用来重现问题，你会得到更好的答案。代码应当：&lt;/p&gt;

&lt;p&gt;​	1. 最小化：在保证再现问题的基础上尽可能使用最少的代码。&lt;/p&gt;

&lt;p&gt;​	2.完整性：提供出现问题的所有代码。&lt;/p&gt;

&lt;p&gt;​	3.可检验性：测试你提供的代码，确保它出现问题。&lt;/p&gt;

&lt;h2 id=&quot;最小化&quot;&gt;最小化&lt;/h2&gt;

&lt;p&gt;代码越多，其他人就越不可能发现问题，可以用一两个方法精炼你的代码：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从零开始。创建一个新程序，添加必要的东西来重现问题。如果你知道问题的来源，这对大型的系统来说会更快。当然对你而言由于法律和道德问题不能提供源代码，只提供最小化的代码也会有用。&lt;/li&gt;
  &lt;li&gt;划分并解决问题。你有一小段代码，但是并不清楚问题的来源，每次移除一点代码直到问题解决，然后把最后一次移除的代码加上。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;最小化和可读性&quot;&gt;最小化和可读性&lt;/h3&gt;

&lt;p&gt;最小化并不意味着简练，不要因为简洁牺牲沟通性。使用统一的命名和缩进，如果需要就加上注释。很多编辑器有格式化代码的快捷键，找到并使用它。还有，不要使用tab，在你的编辑器上看起来可能不错，但是在Stack Overflow上会显得一团糟。&lt;/p&gt;

&lt;h2 id=&quot;完整性&quot;&gt;完整性&lt;/h2&gt;

&lt;p&gt;保证造成问题的所需信息都包括进去了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有些人可能已经准备好加载代码，并且测试他们准备的答案&lt;/li&gt;
  &lt;li&gt;问题可能不在你怀疑的地方，而在另一个地方&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果问题需要服务器端的代码例如XML配置文件，包含进来，如果网页问题需要HTML，一些JS还有样式表，全包含进来。&lt;/p&gt;

&lt;h2 id=&quot;可验证性&quot;&gt;可验证性&lt;/h2&gt;

&lt;p&gt;为了帮助你解决你的问题，其他人需要验证问题的存在：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;描述问题：“它不管用”不是问题的描述方法，告诉我们你期望的行为是什么，告诉我们详细的报错信息是什么，哪一行出现的问题，在问题的标题写上简单的总结。&lt;/li&gt;
  &lt;li&gt;不要牵扯与问题无关的论题：如果你的问题不牵扯到编译问题，那就确保没有编译错误，使用JSLint类似的工具验证一下，验证所有的HTML和XML的文件。&lt;/li&gt;
  &lt;li&gt;保证提供的代码能再现问题！如果写代码过程中你不经意改好了代码但是没有再次测试，所以在寻求帮助之前你最好知道这些&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以关掉电脑重启可能会用，或者把代码放在新的机器上以确保它确实是一段能出问题的代码&lt;/p&gt;

&lt;p&gt;更多的信息关于怎么调试你的程序让你你可以制作最小的代码，你可以放稳&lt;a href=&quot;http://stackoverflow.com/users/88656/eric-lippert&quot;&gt;Eric Lippert&lt;/a&gt;的一篇文章：&lt;a href=&quot;http://ericlippert.com/2014/03/05/how-to-debug-small-programs/&quot;&gt;&lt;em&gt;How to debug small programs&lt;/em&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文来自于[ &lt;a href=&quot;https://stackoverflow.com/help/mcve?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot;&gt;How to create a Minimal, Complete, and Verifiable example&lt;/a&gt;],题目翻译来自&lt;a href=&quot;https://wanqu.co/a/5185/2017-06-07-how-to-create-a-minimal-complete-and-verifiable-example.html?s=/issues&quot;&gt;湾区日报&lt;/a&gt;,非常不错的网站，大家可以去订阅😊。&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Jun 2017 22:42:07 +0800</pubDate>
        <link>http://localhost:4000/%E8%AF%91/2017/06/09/MCVE/</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AF%91/2017/06/09/MCVE/</guid>
        
        
        <category>译</category>
        
      </item>
    
      <item>
        <title>无我编程的十条戒律(转译)</title>
        <description>&lt;ol&gt;
  &lt;li&gt;要理解和接受自己会犯错误
关键是要在代码变成成品之前发现错误。幸运的是，除了在JPL开发火箭导航软件的一些人，其他人的错误并不会造成致命的错误，所以我们要学会并应当，一笑而过😊&lt;/li&gt;
  &lt;li&gt;你不是你的代码
记住审查的目的就是发现错误并且错误会被发现的，当发现一个错误的时候个人别太较真&lt;/li&gt;
  &lt;li&gt;山外有山，人外有人
如果你问的话，有的人能教你一些新的技能。寻找并接受别人的建议，尤其在你认为这没必要的时候。&lt;/li&gt;
  &lt;li&gt;不要在没有结论的情况下重写代码
在改善代码和重写代码之间有个界限，知道两者的不同，并且在代码审查的框架内追求文本上的变化，而不是当一个孤独的执行者。&lt;/li&gt;
  &lt;li&gt;对比你知道少的人要有敬意和耐心
和开发者打交道的非技术人员几乎普遍认为我们在最好的情况下是自负而且喜怒无常的人，在最坏的情况下是爱哭的人。不要用生气和不耐心加强这种观念。&lt;/li&gt;
  &lt;li&gt;世界上唯一不变的是改变
对变化保持开放和乐观的态度，把对你的需求，平台或者工具的每一次改变当作一次新的挑战，而不是不方便。&lt;/li&gt;
  &lt;li&gt;唯一真正的权威源于知识，而不是来自立场。
知识产生权威，权威产生尊重。所以如果你想在无我的环境中获得尊重，学吧。&lt;/li&gt;
  &lt;li&gt;为信仰而战，面对失败要洒脱
要理解你的想法会被否定。即使你被证明是对的，不要报仇雪恨或者一直嚷嚷“我已经讲过了”，不要让你亲爱的想法成为一个殉道者或者集会口号（and don’t make your dearly departed idea a martyr or rallying cry.没有翻译好，求帮助）。&lt;/li&gt;
  &lt;li&gt;不要成为井底之蛙
不要成为只有买东西时才出房间的程序员，小黑屋的人闭塞，缺乏视野并且易失控，在开放合作的环境中没有立足之地。&lt;/li&gt;
  &lt;li&gt;对码不对人，对码农而不是代码好点。
   如果有可能，让你的所有评论都是积极向上并且旨在改善代码，让评论符合当地标准，程序规范，性能提升等。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;原文来自于[ &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0932633420/codihorr-20&quot;&gt;The Psychology of Computer Programming&lt;/a&gt;],题目翻译来自&lt;a href=&quot;https://wanqu.co/&quot;&gt;湾区日报&lt;/a&gt;,非常不错的网站，大家可以去订阅😊。&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Jun 2017 20:20:07 +0800</pubDate>
        <link>http://localhost:4000/%E8%AF%91/2017/06/07/ten/</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AF%91/2017/06/07/ten/</guid>
        
        
        <category>译</category>
        
      </item>
    
      <item>
        <title>AI之后，人才是人</title>
        <description>&lt;p&gt;最近AI越来越火，尤其是在AlphaGo战胜柯洁之后，甚至有很多人惊呼“人类不行了”。且不论按照现在的发展速度AI是否可以发展成为“真正的智能”，毕竟“Artificial Intelligence”中的“Artificial”是“人工的 假的”。但是可以预见的是AI可以替代一些简单的，重复性比较高的，缺乏创造性的工作，所以对于这种情况，美国开国元勋约翰 亚当斯的一句话特别好：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们这一代人必须研究政治和军事来壮大国家，儿辈则要学习数学和工程来创造财富，这样孙辈们才可以学会绘画，音乐和诗歌&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实这句话就是人类近代史的发展目标，政权稳定之后发展经济，生活无忧之后文化蓬勃发展。这种目标在AI的快速发展下变得更加现实。当人类可以从日常的琐事中脱身出来，不需要担心衣食住行，不需要担心健康，当人人都能享受到物质保障，那么只有追求文化和思想方面的满足，其实这也是AI所不能提供的。那个时候更是“百花齐放，百家争鸣”，思想的独立性和开放性将决定一个人的那个时候的所谓的“社会地位”。如果那个时候成为了一个只享受物质的，没有思想的人时，那个时候你不是人了，甚至连机器都不如。&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Jun 2017 13:42:07 +0800</pubDate>
        <link>http://localhost:4000/%E6%83%B3/2017/06/03/AI/</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%83%B3/2017/06/03/AI/</guid>
        
        
        <category>想</category>
        
      </item>
    
  </channel>
</rss>
